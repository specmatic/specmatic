openapi: 3.0.3
info:
  title: Product API
  version: 1.0.0
  description: API to manage products

paths:
  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all products.
      parameters:
        - in: query
          name: columns
          schema:
            type: string
          description: Specify which fields to retrieve in the response
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: price
          schema:
            type: number
            format: float
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      description: Add a new product to the catalog.
      parameters:
        - in: query
          name: columns
          schema:
            type: string
          description: Specify which fields to retrieve in the response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the product to retrieve
        - in: query
          name: columns
          schema:
            type: string
          description: Specify which fields to retrieve in the response
      responses:
        '200':
          description: A single product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

    patch:
      summary: Update a product partially
      description: Partially update product details.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to update
        - in: query
          name: columns
          schema:
            type: string
          description: Specify which fields to retrieve in the response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    delete:
      summary: Delete a product
      description: Delete a product by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
        - in: query
          name: columns
          schema:
            type: string
          description: Specify which fields to retrieve in the response
      responses:
        '202':
          description: Product accepted successfully
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: "Product A"
        description:
          type: string
          example: "A detailed description of Product A."
        price:
          type: number
          format: float
          example: 19.99
        inStock:
          type: boolean
          example: true
      required:
        - id

    ProductInput:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          example: "Product A"
        description:
          type: string
          example: "A detailed description of Product A."
        price:
          type: number
          format: float
          example: 19.99
        inStock:
          type: boolean
          example: true

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Updated Product Name"
        description:
          type: string
          example: "Updated description of the product."
        price:
          type: number
          format: float
          example: 29.99
        inStock:
          type: boolean
          example: false

    NotFoundError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string

    BadRequestError:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
