openapi: 3.0.0
info:
  title: Order API
  version: '1.0'
servers:
  - url: http://localhost:8080
paths:
  /products:
    post:
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - inventory
              properties:
                name:
                  type: string
                type:
                  type: string
                inventory:
                  type: integer
            examples:
              POST_PRODUCTS_SUCCESS:
                value:
                  name: iPhone
                  type: gadget
                  inventory: 100
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              examples:
                POST_PRODUCTS_SUCCESS:
                  value:
                    id: 1

  /findAvailableProducts:
    get:
      summary: Fetch product details
      parameters:
        - name: type
          in: query
          schema:
            type: string
          examples:
            FIND_SUCCESS:
              value: gadget
            FIND_TIMEOUT:
              value: other
        - name: pageSize
          in: header
          schema:
            type: integer
          examples:
            FIND_SUCCESS:
              value: 10
            FIND_TIMEOUT:
              value: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                FIND_SUCCESS:
                  value:
                    - name: iPhone
                      id: 1
                      type: gadget
                      inventory: 100
        '503':
          description: Timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                FIND_TIMEOUT:
                  value:
                    timestamp: '2020-06-02T12:00:00.000+00:00'
                    status: 503
                    error: Service Unavailable
                    message: Timeout

  /orders:
    get:
      summary: Retrieve order information
      parameters:
        - in: query
          name: orderId
          schema:
            type: integer
          examples:
            GET_ORDER_SUCCESS:
              value: 100
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              examples:
                GET_ORDER_SUCCESS:
                  value:
                    - id: 1
                      productid: 1
                      count: 2
                      status: "completed"

components:
  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        type:
          type: string
        inventory:
          type: integer
      required:
        - name
        - id
        - type
        - inventory

    Order:
      type: object
      properties:
        id:
          type: integer
        productid:
          type: integer
        count:
          type: integer
        status:
          type: string
      required:
        - id
        - productid
        - count
        - status

    BadRequest:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: number
        error:
          type: string
        message:
          type: string
