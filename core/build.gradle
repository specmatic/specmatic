plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'org.jreleaser'
}

repositories {
    mavenLocal()
    mavenCentral()
}

def ktor_version = "2.3.13"
def jgit_version = "7.0.0.202409031743-r"
def junit_version = "5.11.4"

dependencies {
    // TODO Fix to eliminate vulnerabilities, remove when the enclosing library supports it
    implementation 'io.netty:netty-codec-http:4.1.118.Final' // used by ktor-server-netty-jvm 2.3.13 in core (last checked on Feb 13 2025)
    implementation 'joda-time:joda-time:2.13.1' // used by swagger-parser 2.1.22
    implementation 'net.minidev:json-smart:2.5.2' // used by json-path 2.9.0 (last checked on Feb 13 2025)

    implementation 'com.ezylang:EvalEx:3.4.0'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'io.cucumber:gherkin:22.0.0'
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-server-cors:$ktor_version"
    implementation("io.ktor:ktor-server-double-receive:$ktor_version")
    implementation("io.ktor:ktor-server-content-negotiation:$ktor_version")
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.18.3'
    implementation 'com.jayway.jsonpath:json-path:2.9.0'


    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.6.3"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.9.25"
    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:$jgit_version"
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'

    implementation 'com.flipkart.zjsonpatch:zjsonpatch:0.4.16'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'

    implementation 'io.swagger.parser.v3:swagger-parser:2.1.24'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    implementation 'com.github.mifmif:generex:1.0.2'
    implementation 'dk.brics:automaton:1.12-1'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation 'org.json:json:20250107'
    testImplementation 'org.springframework:spring-web:6.1.12'
    testImplementation 'io.mockk:mockk:1.13.11'
    testImplementation 'org.assertj:assertj-core:3.27.3'
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
    implementation 'org.thymeleaf:thymeleaf:3.1.3.RELEASE'
}

jar {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'specmatic-core'
            from components.java
            pom {
                name = 'Specmatic'
                description = 'Turn your contracts into executable specifications. Contract Driven Development - Collaboratively Design & Independently Deploy MicroServices & MicroFrontends.'
                url = 'https://specmatic.io'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/znsio/specmatic/blob/main/License.md'
                    }
                }
                developers {
                    developer {
                        id = 'specmaticBuilders'
                        name = 'Specmatic Builders'
                        email = 'info@specmatic.io'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:znsio/specmatic.git'
                    url = 'https://specmatic.io/'
                }
            }
        }
    }
    repositories {
        maven {
            name = "stagingDeploy"
            url = project.layout.buildDirectory.dir('staging-deploy')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign).configureEach {
    onlyIf { project.hasProperty("signing.keyId") }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = false
        csv.required = false
    }
}

jreleaser {
    gitRootSearch = true

    release {
        github {
            enabled = false
        }
    }

    signing {
        active = 'ALWAYS'
        armored = true
    }

    deploy {
        maven {
            mavenCentral {
                core {
                    stage = 'UPLOAD'
                    active = project.version.get().endsWith('-SNAPSHOT') ? 'SNAPSHOT' : 'RELEASE'
                    url = project.version.get().endsWith('-SNAPSHOT') ? 'https://central.sonatype.com/repository/maven-snapshots' : 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepositories.add("build/staging-deploy")

                    snapshotSupported = true
                    applyMavenCentralRules = true

                    artifactOverride {
                        artifactId = 'specmatic-core'
                        jar = true
                        sourceJar = true
                        javadocJar = true
                        verifyPom = true
                    }

                    stagingRepository('build/staging-deploy')

                    namespace = 'io.specmatic'
                }
            }
        }
    }
}