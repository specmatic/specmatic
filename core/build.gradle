plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'signing'
}

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.7"
}

repositories {
    mavenLocal()
    mavenCentral()
}

def ktor_version = "1.6.3"
def karate_version = "0.9.6"
def jgit_version = "5.13.0.202109080827-r"

def junit_version = "5.8.0"
def testcontainers_version = "1.16.0"

dependencies {
    implementation 'io.cucumber:gherkin:21.0.0'
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-features:$ktor_version"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.2.2"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.5.30"
    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:$jgit_version"

    implementation "org.testcontainers:testcontainers:$testcontainers_version"
    implementation "org.testcontainers:kafka:$testcontainers_version"

    implementation 'org.apache.kafka:kafka-clients:2.8.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'

    implementation 'io.swagger.parser.v3:swagger-parser:2.0.27'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.31.0'
    testImplementation 'org.assertj:assertj-core:3.20.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation 'org.json:json:20210307'
    testImplementation "com.intuit.karate:karate-core:$karate_version"
    testImplementation "com.intuit.karate:karate-apache:$karate_version"
    testImplementation "com.intuit.karate:karate-junit5:$karate_version"
    testImplementation 'org.springframework:spring-web:5.3.10'
    testImplementation 'io.mockk:mockk:1.12.0'
    testImplementation 'org.assertj:assertj-core:3.20.2'
    testImplementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()
}

group = 'in.specmatic'

jar {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'specmatic-core'
            from components.java
            pom {
                name = 'Specmatic'
                description = 'Turn your contracts into executable specifications. Contract Driven Development - Collaboratively Design & Independently Deploy MicroServices & MicroFrontends.'
                url = 'https://specmatic.in'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/znsio/specmatic/blob/main/License.md'
                    }
                }
                developers {
                    developer {
                        id = 'specmaticBuilders'
                        name = 'Specmatic Builders'
                        email = 'info@specmatic.in'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:znsio/specmatic.git'
                    url = 'https://specmatic.in/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty("ossrhUsername") ? project.getProperty("ossrhUsername") : ""
                password = project.hasProperty("ossrhPassword") ? project.getProperty("ossrhPassword") : ""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty("signing.keyId") }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}

