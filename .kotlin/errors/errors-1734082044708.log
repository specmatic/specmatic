kotlin version: 2.1.0
error message: org.jetbrains.kotlin.backend.common.BackendException: Backend Internal error: Exception during IR lowering
File being compiled: /Users/samy/Desktop/Projects/specmatic/application/src/test/kotlin/application/ExamplesCommandTest.kt
The root cause java.lang.RuntimeException was thrown at: org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:48)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException(CodegenUtil.kt:253)
	at org.jetbrains.kotlin.backend.common.CodegenUtil.reportBackendException$default(CodegenUtil.kt:236)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:55)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:42)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:28)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:192)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.runBackend(jvmCompilerPipeline.kt:80)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileModule(jvmCompilerPipelineLightTree.kt:264)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileSingleModuleUsingFrontendIrAndLightTree(jvmCompilerPipelineLightTree.kt:231)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipelineLightTree.kt:86)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:146)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:102)
	at org.jetbrains.kotlin.cli.common.CLICompiler.exec(CLICompiler.kt:316)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:674)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:91)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1659)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.RuntimeException: Exception while generating code for:
FUN name:examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario visibility:public modality:FINAL <> ($this:application.ExamplesCommandTest, tempDir:java.io.File) returnType:kotlin.Unit
  annotations:
    Test
  $this: VALUE_PARAMETER name:<this> type:application.ExamplesCommandTest
  VALUE_PARAMETER name:tempDir index:0 type:java.io.File
    annotations:
      TempDir(factory = <null>, cleanup = <null>)
  BLOCK_BODY
    VAR name:specFile type:java.io.File [val]
      CALL 'public final fun resolve (relative: kotlin.String): java.io.File declared in kotlin.io.FilesKt' type=java.io.File origin=null
        $receiver: GET_VAR 'tempDir: java.io.File declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
        relative: CONST String type=kotlin.String value="spec.yaml"
    VAR name:examplesDir type:java.io.File [val]
      CALL 'public final fun resolve (relative: kotlin.String): java.io.File declared in kotlin.io.FilesKt' type=java.io.File origin=null
        $receiver: GET_VAR 'tempDir: java.io.File declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
        relative: CONST String type=kotlin.String value="spec_examples"
    COMPOSITE type=kotlin.Unit origin=null
      CALL 'public open fun createNewFile (): kotlin.Boolean declared in java.io.File' type=kotlin.Boolean origin=null
        $this: GET_VAR 'val specFile: java.io.File [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
      COMPOSITE type=kotlin.Unit origin=null
    VAR name:spec type:kotlin.String [val]
      CONST String type=kotlin.String value="openapi: 3.0.0\ninfo:\n  title: Product API\n  version: 1.0.0\npaths:\n  /product/{id}:\n    get:\n      summary: Get product details\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Product details\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: integer\n                  name:\n                    type: string\n                  price:\n                    type: number\n                    format: float"
    CALL 'public final fun writeText$default (text: kotlin.String, charset: java.nio.charset.Charset?, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit declared in kotlin.io.FilesKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
      $receiver: GET_VAR 'val specFile: java.io.File [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
      text: GET_VAR 'val spec: kotlin.String [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=kotlin.String origin=null
      charset: COMPOSITE type=java.nio.charset.Charset? origin=DEFAULT_VALUE
        CONST Null type=java.nio.charset.Charset? value=null
      $mask0: CONST Int type=kotlin.Int value=2
      $handler: CONST Null type=kotlin.Any? value=null
    COMPOSITE type=kotlin.Unit origin=null
      CALL 'public open fun mkdirs (): kotlin.Boolean declared in java.io.File' type=kotlin.Boolean origin=null
        $this: GET_VAR 'val examplesDir: java.io.File [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
      COMPOSITE type=kotlin.Unit origin=null
    VAR name:example type:kotlin.String [val]
      CONST String type=kotlin.String value="{\n  \"http-request\": {\n    \"method\": \"GET\",\n    \"path\": \"/products/1\"\n  },\n  \"http-response\": {\n    \"status\": 200,\n    \"body\": {\n      \"id\": 1,\n      \"name\": \"Laptop\",\n      \"price\": 1000.99\n    },\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n}"
    VAR name:exampleFile type:java.io.File [val]
      CALL 'public final fun resolve (relative: kotlin.String): java.io.File declared in kotlin.io.FilesKt' type=java.io.File origin=null
        $receiver: GET_VAR 'val examplesDir: java.io.File [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
        relative: CONST String type=kotlin.String value="example.json"
    CALL 'public final fun writeText$default (text: kotlin.String, charset: java.nio.charset.Charset?, $mask0: kotlin.Int, $handler: kotlin.Any?): kotlin.Unit declared in kotlin.io.FilesKt' type=kotlin.Unit origin=DEFAULT_DISPATCH_CALL
      $receiver: GET_VAR 'val exampleFile: java.io.File [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
      text: GET_VAR 'val example: kotlin.String [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=kotlin.String origin=null
      charset: COMPOSITE type=java.nio.charset.Charset? origin=DEFAULT_VALUE
        CONST Null type=java.nio.charset.Charset? value=null
      $mask0: CONST Int type=kotlin.Int value=2
      $handler: CONST Null type=kotlin.Any? value=null
    VAR name:command type:application.ExamplesCommand.Validate [val]
      CALL 'public final fun also <T> (block: kotlin.Function1<T of kotlin.StandardKt.also, kotlin.Unit>): T of kotlin.StandardKt.also [inline] declared in kotlin.StandardKt' type=application.ExamplesCommand.Validate origin=null
        <T>: application.ExamplesCommand.Validate
        $receiver: CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in application.ExamplesCommand.Validate' type=application.ExamplesCommand.Validate origin=null
        block: BLOCK type=kotlin.Function1<application.ExamplesCommand.Validate, kotlin.Unit> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          FUNCTION_REFERENCE 'private final fun examples_validate_command_should_not_print_an_empty_error_when_it_sees_an_inline_example_for_a_filtered_out_scenario$lambda$0 ($specFile: java.io.File, it: application.ExamplesCommand.Validate): kotlin.Unit declared in application.ExamplesCommandTest' type=kotlin.Function1<application.ExamplesCommand.Validate, kotlin.Unit> origin=INLINE_LAMBDA reflectionTarget=null
            $specFile: GET_VAR 'val specFile: java.io.File [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=java.io.File origin=null
    VAR IR_TEMPORARY_VARIABLE name:<destruct> type:kotlin.Pair<kotlin.String, kotlin.Int> [val]
      CALL 'public final fun captureStandardOutput <ReturnType> (fn: kotlin.Function0<ReturnType of application.SamplesCommandKtTestKt.captureStandardOutput>): kotlin.Pair<kotlin.String, ReturnType of application.SamplesCommandKtTestKt.captureStandardOutput> declared in application.SamplesCommandKtTestKt' type=kotlin.Pair<kotlin.String, kotlin.Int> origin=null
        <ReturnType>: kotlin.Int
        fn: BLOCK type=kotlin.Function0<kotlin.Int> origin=LAMBDA
          COMPOSITE type=kotlin.Unit origin=null
          CALL 'public final fun <jvm-indy> <T> (dynamicCall: T of kotlin.jvm.internal.<jvm-indy>, bootstrapMethodHandle: kotlin.Any, vararg bootstrapMethodArguments: kotlin.Any): T of kotlin.jvm.internal.<jvm-indy> declared in kotlin.jvm.internal' type=kotlin.Function0<kotlin.Int> origin=null
            <T>: kotlin.Function0<kotlin.Int>
            dynamicCall: CALL 'public final fun invoke (p0: application.ExamplesCommand.Validate): kotlin.Function0<kotlin.Int> declared in kotlin.jvm.internal.invokeDynamic' type=kotlin.Function0<kotlin.Int> origin=null
              p0: GET_VAR 'val command: application.ExamplesCommand.Validate [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=application.ExamplesCommand.Validate origin=null
            bootstrapMethodHandle: CALL 'public final fun <jvm-method-handle> (tag: kotlin.Int, owner: kotlin.String, name: kotlin.String, descriptor: kotlin.String, isInterface: kotlin.Boolean): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
              tag: CONST Int type=kotlin.Int value=6
              owner: CONST String type=kotlin.String value="java/lang/invoke/LambdaMetafactory"
              name: CONST String type=kotlin.String value="metafactory"
              descriptor: CONST String type=kotlin.String value="(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"
              isInterface: CONST Boolean type=kotlin.Boolean value=false
            bootstrapMethodArguments: VARARG type=kotlin.Array<kotlin.Any> varargElementType=kotlin.Any
              CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): R of kotlin.Function0 [operator] declared in kotlin.Function0' type=kotlin.Any
              RAW_FUNCTION_REFERENCE 'private final fun examples_validate_command_should_not_print_an_empty_error_when_it_sees_an_inline_example_for_a_filtered_out_scenario$lambda$1 ($command: application.ExamplesCommand.Validate): kotlin.Int declared in application.ExamplesCommandTest' type=kotlin.Any
              CALL 'public final fun <jvm-original-method-type> (method: kotlin.Any): kotlin.Any declared in kotlin.jvm.internal' type=kotlin.Any origin=null
                method: RAW_FUNCTION_REFERENCE 'public abstract fun invoke (): kotlin.Int? [fake_override,operator] declared in kotlin.jvm.internal.invokeDynamic.<fake>' type=kotlin.Any
    VAR name:output type:kotlin.String [val]
      CALL 'public final fun component1 (): A of kotlin.Pair [operator] declared in kotlin.Pair' type=kotlin.String origin=COMPONENT_N(index=1)
        $this: GET_VAR 'val <destruct>: kotlin.Pair<kotlin.String, kotlin.Int> [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=kotlin.Pair<kotlin.String, kotlin.Int> origin=null
    VAR name:returnValue type:kotlin.Int [val]
      CALL 'public final fun component2 (): B of kotlin.Pair [operator] declared in kotlin.Pair' type=kotlin.Int origin=COMPONENT_N(index=2)
        $this: GET_VAR 'val <destruct>: kotlin.Pair<kotlin.String, kotlin.Int> [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=kotlin.Pair<kotlin.String, kotlin.Int> origin=null
    CALL 'public final fun println (message: kotlin.Any?): kotlin.Unit [inline] declared in kotlin.io.ConsoleKt' type=kotlin.Unit origin=null
      message: GET_VAR 'val output: kotlin.String [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=kotlin.String origin=null
    COMPOSITE type=kotlin.Unit origin=null
      CALL 'public open fun isNotEqualTo (other: kotlin.Int): @[FlexibleNullability] SELF of org.assertj.core.api.AbstractIntegerAssert? declared in org.assertj.core.api.AbstractIntegerAssert' type=@[FlexibleNullability] org.assertj.core.api.AbstractIntegerAssert<*>? origin=null
        $this: CALL 'public open fun assertThat (actual: kotlin.Int): @[FlexibleNullability] org.assertj.core.api.AbstractIntegerAssert<*>? declared in org.assertj.core.api.Assertions' type=@[FlexibleNullability] org.assertj.core.api.AbstractIntegerAssert<*>? origin=null
          actual: GET_VAR 'val returnValue: kotlin.Int [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=kotlin.Int origin=null
        other: CONST Int type=kotlin.Int value=0
      COMPOSITE type=kotlin.Unit origin=null
    COMPOSITE type=kotlin.Unit origin=null
      CALL 'public open fun contains (vararg values: @[FlexibleNullability] kotlin.CharSequence?): @[FlexibleNullability] SELF of org.assertj.core.api.AbstractStringAssert? [fake_override] declared in org.assertj.core.api.AbstractStringAssert' type=@[FlexibleNullability] org.assertj.core.api.AbstractStringAssert<*>? origin=null
        $this: CALL 'public open fun assertThat (actual: @[FlexibleNullability] kotlin.String?): @[FlexibleNullability] org.assertj.core.api.AbstractStringAssert<*>? declared in org.assertj.core.api.Assertions' type=@[FlexibleNullability] org.assertj.core.api.AbstractStringAssert<*>? origin=null
          actual: GET_VAR 'val output: kotlin.String [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=kotlin.String origin=null
        values: BLOCK type=@[FlexibleNullability] @[FlexibleArrayElementVariance] kotlin.Array<out @[FlexibleNullability] kotlin.CharSequence?>? origin=null
          VAR IR_TEMPORARY_VARIABLE name:tmp0 type:@[FlexibleNullability] @[FlexibleArrayElementVariance] kotlin.Array<out @[FlexibleNullability] kotlin.CharSequence?>? [val]
            CALL 'public final fun arrayOfNulls <T> (size: kotlin.Int): kotlin.Array<T of kotlin.arrayOfNulls?> declared in kotlin' type=@[FlexibleNullability] @[FlexibleArrayElementVariance] kotlin.Array<out @[FlexibleNullability] kotlin.CharSequence?>? origin=null
              <T>: @[FlexibleNullability] kotlin.CharSequence?
              size: CONST Int type=kotlin.Int value=1
          CALL 'public final fun set (index: kotlin.Int, value: T of kotlin.Array): kotlin.Unit [operator] declared in kotlin.Array' type=kotlin.Unit origin=null
            $this: GET_VAR 'val tmp0: @[FlexibleNullability] @[FlexibleArrayElementVariance] kotlin.Array<out @[FlexibleNullability] kotlin.CharSequence?>? [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=@[FlexibleNullability] @[FlexibleArrayElementVariance] kotlin.Array<out @[FlexibleNullability] kotlin.CharSequence?>? origin=null
            index: CONST Int type=kotlin.Int value=0
            value: CONST String type=kotlin.String value="No matching specification found for this example"
          GET_VAR 'val tmp0: @[FlexibleNullability] @[FlexibleArrayElementVariance] kotlin.Array<out @[FlexibleNullability] kotlin.CharSequence?>? [val] declared in application.ExamplesCommandTest.examples validate command should not print an empty error when it sees an inline example for a filtered-out scenario' type=@[FlexibleNullability] @[FlexibleArrayElementVariance] kotlin.Array<out @[FlexibleNullability] kotlin.CharSequence?>? origin=null
      COMPOSITE type=kotlin.Unit origin=null

	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:48)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:41)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:407)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:424)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:169)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:52)
	... 47 more
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at org.jetbrains.kotlin.utils.SmartList.iterator(SmartList.java:232)
	at org.jetbrains.kotlin.codegen.inline.MaxStackFrameSizeAndLocalsCalculator.visitMaxs(MaxStackFrameSizeAndLocalsCalculator.kt:190)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.doGenerate(FunctionCodegen.kt:128)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate(FunctionCodegen.kt:45)
	at org.jetbrains.kotlin.backend.jvm.codegen.FunctionCodegen.generate$default(FunctionCodegen.kt:41)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethodNode(ClassCodegen.kt:407)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generateMethod(ClassCodegen.kt:424)
	at org.jetbrains.kotlin.backend.jvm.codegen.ClassCodegen.generate(ClassCodegen.kt:169)
	at org.jetbrains.kotlin.backend.jvm.FileCodegen.lower(JvmPhases.kt:39)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt.createFilePhase$lambda$4(PhaseFactories.kt:71)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseFactoriesKt$$Lambda$183/0x0000007801142778.invoke(Unknown Source)
	at org.jetbrains.kotlin.backend.common.phaser.PhaseBuildersKt$createSimpleNamedCompilerPhase$1.phaseBody(PhaseBuilders.kt:69)
	at org.jetbrains.kotlin.backend.common.phaser.SimpleNamedCompilerPhase.phaseBody(CompilerPhase.kt:226)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invokeSequential(performByIrFile.kt:52)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:42)
	at org.jetbrains.kotlin.backend.common.phaser.PerformByIrFilePhase.invoke(performByIrFile.kt:28)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:27)
	at org.jetbrains.kotlin.backend.common.phaser.CompositePhase.invoke(PhaseBuilders.kt:14)
	at org.jetbrains.kotlin.backend.common.phaser.NamedCompilerPhase.phaseBody(CompilerPhase.kt:166)
	at org.jetbrains.kotlin.backend.common.phaser.AbstractNamedCompilerPhase.invoke(CompilerPhase.kt:113)
	at org.jetbrains.kotlin.backend.common.phaser.CompilerPhaseKt.invokeToplevel(CompilerPhase.kt:62)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.invokeCodegen(JvmIrCodegenFactory.kt:371)
	at org.jetbrains.kotlin.codegen.CodegenFactory.generateModule(CodegenFactory.kt:47)
	at org.jetbrains.kotlin.backend.jvm.JvmIrCodegenFactory.generateModuleInFrontendIRMode(JvmIrCodegenFactory.kt:433)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.generateCodeFromIr(jvmCompilerPipeline.kt:192)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.runBackend(jvmCompilerPipeline.kt:80)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileModule(jvmCompilerPipelineLightTree.kt:264)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileSingleModuleUsingFrontendIrAndLightTree(jvmCompilerPipelineLightTree.kt:231)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineLightTreeKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipelineLightTree.kt:86)


