plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'maven-publish'
    id 'signing'
}

apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.7"
}

application {
    mainClass.set("application.SpecmaticApplication")
}

jar {
    from '../version.properties'
}

shadowJar {
    archiveFileName = "specmatic.${archiveExtension.get()}"
    from '../version.properties'
}

repositories {
    mavenLocal()
    mavenCentral()
}

def ktor_version = "2.3.12"
def junit_version = "5.11.3"
def jgit_version = "7.0.0.202409031743-r"

dependencies {
    // TODO Put library reference overrides here to eliminate vulnerabilities, and remove the override when no longer needed
    implementation 'io.netty:netty-codec-http:4.1.115.Final' // used by ktor-server-netty-jvm 2.3.9 in core
    implementation 'joda-time:joda-time:2.13.0' // used by swagger-parser 2.1.22


    implementation 'com.arakelian:java-jq:2.0.0'
    testImplementation 'com.arakelian:java-jq:2.0.0'

    implementation 'org.assertj:assertj-core:3.26.3'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.11.3'

    implementation('info.picocli:picocli-spring-boot-starter:4.7.6') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.springframework.boot', module: 'spring-boot'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
        exclude group: 'org.springframework.boot', module: 'spring-boot-autoconfigure'
    }
    implementation('org.springframework.boot:spring-boot-starter:3.3.5') {
        exclude group: 'org.springframework', module: 'spring-core'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
    implementation('org.springframework.boot:spring-boot-autoconfigure:3.3.5')
    implementation('org.springframework:spring-core:6.1.14')
    implementation 'info.picocli:picocli:4.7.6'
    implementation "io.ktor:ktor-client-core-jvm:${ktor_version}"
    implementation "io.ktor:ktor-network-tls:$ktor_version"
    implementation "io.ktor:ktor-network-tls-certificates:$ktor_version"

    implementation 'org.junit.platform:junit-platform-launcher:1.11.3'
    implementation 'org.junit.platform:junit-platform-reporting:1.11.3'

    implementation "org.eclipse.jgit:org.eclipse.jgit:$jgit_version"
    implementation "org.eclipse.jgit:org.eclipse.jgit.ssh.apache:$jgit_version"

    implementation 'org.slf4j:slf4j-nop:2.0.16'

    implementation 'org.apache.ant:ant-junit:1.10.15'

    implementation(project(':core'))
    implementation(project(':junit5-support'))

    implementation "io.ktor:ktor-client-cio:$ktor_version"
    implementation 'io.swagger.parser.v3:swagger-parser:2.1.22'

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.6.3"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    testImplementation('org.springframework.boot:spring-boot-starter-test:3.3.5') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude module: 'mockito-core'
    }
    testImplementation 'io.mockk:mockk:1.13.13'
    testImplementation('com.ninja-squad:springmockk:3.1.1') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'com.ginsberg:junit5-system-exit:2.0.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation 'io.kotest:kotest-assertions-core-jvm:5.9.1'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    def junit5SystemExit = configurations.testRuntimeClasspath.files
            .find { it.name.contains('junit5-system-exit') }
    jvmArgumentProviders.add({["-javaagent:$junit5SystemExit"]} as CommandLineArgumentProvider)
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = false
        csv.required = false
    }
}

group = 'io.specmatic'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'specmatic-executable'
            from components.java
            pom {
                name = 'Specmatic Executable'
                description = 'Command-line standalone executable jar for Specmatic'
                url = 'https://specmatic.io'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/znsio/specmatic/blob/main/License.md'
                    }
                }
                developers {
                    developer {
                        id = 'specmaticBuilders'
                        name = 'Specmatic Builders'
                        email = 'info@specmatic.io'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:znsio/specmatic.git'
                    url = 'https://specmatic.io/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty("ossrhUsername") ? project.getProperty("ossrhUsername") : ""
                password = project.hasProperty("ossrhPassword") ? project.getProperty("ossrhPassword") : ""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign).configureEach {
    onlyIf { project.hasProperty("signing.keyId") }
}
